#include <iostream>
#include <algorithm>
#include <vector>

/*
Sweeping(스위핑) : 쓸다, 광범위한, 휩쓰는
스위핑 기법은 한쪽 방향에서 시작하여 다른 방향으로 스캔하며 탐색하는것으로 
특정한 자료구조나 구체적인 코드가 있는 것은 아님, 하지만 한쪽 방향에서 시작하여 다른 방향으로
차근차근 해결해 나가는 기법으로 한번만 전체 공간을 스캔하면서 마주치는 요소들에 대해
뭔가를 해주면 정답이 구해지는 형태임.

보통, 수직선에 선분을 중첩해서 긋는데 이때 좌표의 범위가 -10억~10억 일 경우 배열을 만들어
좌표를 표기하는 방법은 불가능함.(메모리 초과)
이럴 경우 스위핑 기법을 이용하여 문제를 히결하며, 보통 정렬 알고리즘에서 발생하는 시간복잡도(N * Log(n))을 따라가는 경우가 많음.

*/

using namespace std;

int n;
vector<pair<int, int>> lines;

// 선분 시작점을 기준으로 정렬
bool cmp(pair<int, int> &f, pair<int, int> &s)
{
	return f.first < s.first;
}

int main()
{
	/*
	입력
	5
	-5 -2
	-3 0
	2 5
	6 10
	8 12

	출력
	14
	(14가나오느지 검산할것)
	*/

	// 사용자 입력 받음
	cin >> n;
	int s, e;
	for (int i = 0; i < n; i++)
	{
		cin >> s >> e;
		if (s > e)
			lines.push_back({ e, s });
		else
			lines.push_back({ s, e });
	}

	// 선분들을 시작점을 기준으로 정렬
	sort(lines.begin(), lines.end(), cmp);

	int result = 0;
	int start = lines[0].first, end = lines[0].second;
	result = (end - start);

	for (int i = 1; i < lines.size(); i++)
	{
		pair<int, int> p = lines.at(i);
		int lineStart = p.first;
		int lineEnd = p.second;

		// 새로 꺼낸 선분이 기존 선분 안에 완전히 포함될 경우
		if (end >= lineEnd) continue;

		// 선분이 서로 겹치지 않는경우
		if (end < lineStart)
		{
			start = lineStart;
			end = lineEnd;
			result += (end - start);
		}
		else
		{
			result += (lineEnd - end);
			end = lineEnd;
		}
	}

	cout << result;
	return 0;
}