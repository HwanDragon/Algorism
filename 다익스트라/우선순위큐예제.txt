#include <iostream>
#include <vector>
#include <queue>

using namespace std;

#define INF 1000000000	// 무한대의 값을 표현
#define NODE_COUNT 6	// 정점의 개수

/*
정답 : 0 2 3 1 2 4
*/

// {노드, 비용}
// edges 1번부터 사용하기위해 0번에는 아무것도 추가하지않음
vector<pair<int, int>> edges[NODE_COUNT + 1] = 
{
	{},
	{{2, 2}, {3, 5}, {4, 1}},
	{{1, 2}, {3, 3}, {4, 2}},
	{{1, 5}, {2, 3}, {4, 3}, {5, 1}, {6, 5}},
	{{1, 1}, {2, 2}, {3, 3}, {5, 1}},
	{{3, 1}, {4, 1}, {6, 2}},
	{{3, 5}, {5, 2}}
}
;
int dists[NODE_COUNT + 1] = { 0, };

struct cmp {
	bool operator() (pair<int, int> &f, pair<int, int> &s) {
		return f.second > s.second;
	}
};

void dijkstra(int startNode)
{
	// 거리순으로 정렬하기위한 우선순위 큐 생성
	priority_queue<pair<int, int>, vector<pair<int, int>>, cmp> pq;

	// 시작노드엣 시작노드까지의 비용은 0으로 세팅
	dists[startNode] = 0;

	// 우선순위큐에 시작노드, 시작노드에서 시작노드까지의 비용 0 추가
	pq.push({ startNode, 0 });
	while (pq.empty() == false)
	{
		// 우선순위 큐에서 데이터를 꺼냄
		// first는 현재 노드를 나타냄
		// second는 이전 노드에서 현재노드까지의 비용을 나타냄
		int current = pq.top().first;
		int distToCurrent = pq.top().second;
		pq.pop();

		if (dists[current] < distToCurrent)	continue;	// 최단거리가 아님

		for (int i = 0; i < edges[current].size(); i++)
		{
			// 다음 노드까지의 비용 계산을 위해 edges에서 next node를 꺼냄
			pair<int, int> p = edges[current][i];
			int nextNode = p.first;
			int distToNextNode = p.second;

			// 이전 노드들에서 현재 노드까지의 거리 (distToCurrent)
			// 현재 노드에서 다음 노드까지의 거리 (distToNextNode)
			// 두 합이 다음노드까지의 이전 계산값(dists[nextNode])보다 비용이 작다면
			if (dists[nextNode] > distToCurrent + distToNextNode) {
				dists[nextNode] = distToCurrent + distToNextNode;	// 비용 갱신
				pq.push({ nextNode, distToCurrent + distToNextNode });	// 다음 노드에 새로운 비용을 갱신하여 우선순위큐에 추가함
			}
		}
	}
}

void print()
{
	for (int i = 1; i <= NODE_COUNT; i++)
	{
		cout << dists[i] << " ";
	}
}

int main()
{
	dists[0] = -1;	// 안쓰는 노드
	for (int i = 1; i <= NODE_COUNT; i++) dists[i] = INF;

	dijkstra(1);
	print();

	return 0;
}