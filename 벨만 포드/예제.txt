#include<iostream>
#include <vector>

/*
입력 예제1
5 7
1 2 5
1 3 4
2 3 -3
3 4 5
4 2 3
2 5 13
4 5 7
정답 : 0 5 2 7 14
*/

/*
입력 예제2
3 4
1 2 4
1 3 3
2 3 -4
3 1 -2
정답 : 사이클이 존재하는 그래프입니다.
*/

#define INF 100000000
#define MAX_NODE_COUNT 10000
using namespace std;

class Edge {
public:
	int first = 0;
	int second = 0;
	int weight = 0;
	Edge() {
	}
};

vector<Edge*> edges;
int dists[MAX_NODE_COUNT + 1] = { 0, };
int n, m;

bool bellmanFord(int startNode)
{
	dists[startNode] = 0;	// 시작 노드 0으로 초기화
	/*
	* 노드 개수만큼 반복해서
	* 모든 엣지에대해 relaxation 수행
	*/
	for (int i = 1; i <= n; i++)
	{
		for (int j = 0; j < edges.size(); j++)
		{
			Edge* edge = edges.at(j);
			int first = edge->first;
			int second = edge->second;
			int weight = edge->weight;

			if (dists[first] == INF) continue;	// 한번도 계산되지 않은 정점은 pass

			if (dists[second] > dists[first] + weight)
			{
				dists[second] = dists[first] + weight;

				if (i == n) return true; // N번째에서도 노드가 갱신됨(음수 사이클 존재)
			}
		}
	}

	return false;
}

int main()
{
	// 사용자 입력 받음
	cin >> n >> m;
	for (int i = 0; i < m; i++)
	{
		Edge* edge = new Edge();
		cin >> edge->first >> edge->second >> edge->weight;
		edges.push_back(edge);	// 간선 정보 저장
	}

	// dists 배열 초기화
	for (int i = 1; i <= n; i++) dists[i] = INF;

	// 벨만포드 알고리즘 수행
	bool cycle = bellmanFord(1);

	if (cycle == true)
	{
		cout << "사이클이 존재하는 그래프 입니다.\n";
	}
	else
	{
		for (int i = 1; i <= n; i++)
		{
			cout << dists[i] << " ";
		}
	}
	return 0;
}